# 必备参数(位置参数)：即参数值和形参个数和顺序相匹配的参数类型
# 默认参数：设置了一个默认值的形参被称为默认参数
def f(x, y=100):
    z = x + y
    return x, y, z


x, y, z = f(10)
print(f"x={x}, y={y}, z={z}")
'''
函数在调用时不用再为默认参数传值，y已经有了默认值100，
也可以为默认参数传入一个新的值，默认参数的值会被修改，
默认参数的要求：1.默认参数只能为不可变对象数据类型，
             2.若参数列表中有必备参数，默认参数的顺序只能在必备参数后面
'''


# 关键字参数：在函数调用时，使用关键字来指明要传入的参数值，使参数值传入的顺序不再重要
def f(x, y):
    z = x + y
    return x, y, z


x, y, z = f(x=10, y=20)
print(f"x={x}, y={y}, z={z}")


# 可变长度参数：在函数调用时，自定义地控制要传入参数的个数
def f(*x):
    print(x)


f(1, 2, 3, 4, 5)
'''
输出为：(1, 2, 3, 4, 5)
参数x前带有一个*，代表x为可变长度参数，
函数在调用时可以为x直接传入多个参数值，这些值会组成一个元组再赋值给x
'''


def f(**x):
    print(x)


f(one=1, two=2, three=3)
'''
输出为：{'one': 1, 'two': 2, 'three': 3}
带两个*的可变长度参数在函数调用时需要结合关键字参数一起使用，
传入后这些参数的关键字作为键，参数值作为值组合成一个字典赋值给x
'''


# 以上的4中参数的先后顺序为必备参数、默认参数、*x可变参数、**x可变参数
def f(a, b=10, *c, **d):
    print(f"a={a}, b={b}, c={c}, d={d}")


f(10, 20, 123, 'hello', name='Tom', ipone=119)
'''
输出为a=10, b=20, c=(123, 'hello'), d={'name': 'Tom', 'ipone': 119}
默认参数b传入一个新的值，原本的值被修改
'''

# 参数传递
'''
不可变数据类型对象：将不可变数据类型对象作为参数值传递给参数列表时，
                在函数体里对形参做的改变不会影响函数体外外部实参本身
可变数据类型对象：将可变数据类型对象作为参数值传递给参数列表时，
              是真正地将整个对象传递给形参，在函数体里修改形参后，函数体外外部实参变量跟着改变
'''